---
import { Image, inferRemoteSize } from "astro:assets";
import type { ImageListProps } from "../models/ImageList";

type Props = ImageListProps;

const { images, dir } = Astro.props;

const DEFAULT_MAX_WIDTH = 1024;
const DEFAULT_MAX_HEIGHT = 1024;

const imagesWithDims = await Promise.all(
  images.map(async (image) => {
    const url = `https://static.duvallj.pw/photography/${dir}/${image.imgfile}`;
    const { width: remoteWidth, height: remoteHeight } =
      await inferRemoteSize(url);

    const maxWidth = image.maxWidth ?? DEFAULT_MAX_WIDTH;
    const maxHeight = image.maxHeight ?? DEFAULT_MAX_HEIGHT;

    const width = Math.min(maxWidth, (remoteWidth * maxHeight) / remoteHeight);
    const height = Math.min(maxHeight, (remoteHeight * maxWidth) / remoteWidth);

    return { ...image, width, height, url };
  })
);
---

{
  imagesWithDims.map(
    ({
      title,
      url,
      width,
      height,
      imgtitle,
      imgalt,
      eager,
      caption,
      scrollX,
      marginY,
    }) => (
      <figure>
        <h3 set:html={title} />
        <a
          href={url}
          target="_blank"
          style={{
            ...(marginY ? { margin: `0 ${marginY}` } : undefined),
          }}
          class={scrollX ? "scrollX" : undefined}
        >
          <Image
            src={url}
            width={width}
            height={height}
            title={imgtitle}
            alt={imgalt ?? "A photograph"}
            loading={eager ? "eager" : undefined}
            quality="max"
          />
        </a>
        <figcaption set:html={caption} />
      </figure>
    )
  )
}

<style>
  figure {
    padding: 0;

    display: flex;
    flex-direction: column;
  }

  a {
    align-self: center;
  }

  .scrollX {
    overflow-x: auto;
    max-width: 100%;
  }

  .scrollX img {
    max-width: none;
  }
</style>
